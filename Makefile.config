#
# Copyright (C) 2013-2018 Canonical, Ltd.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

CFLAGS += -Wall -Wextra -DVERSION='"$(VERSION)"' -O2 -std=gnu99 -I.

APPARMOR_PARSER=/sbin/apparmor_parser

LIB_APPARMOR := -lapparmor
KERNEL=$(shell uname -s)
ifeq (,$(findstring $(KERNEL),Darwin DragonFly FreeBSD NetBSD OpenBSD))
LIB_BSD := -lbsd
endif
LIB_Z := -lz
LIB_CRYPT := -lcrypt
LIB_RT := -lrt
LIB_PTHREAD := -lpthread
LIB_AIO = -laio
LIB_SCTP = -lsctp
LIB_DL = -ldl

HAVE_NOT = HAVE_CONFIG=1
DIR=test

#
#  Load in current config; use 'make clean' to clear this
#
-include config

CFLAGS += $(CONFIG_CFLAGS)
LDFLAGS += $(CONFIG_LDFLAGS)
OBJS += $(CONFIG_OBJS)

HAVE_VARS := $(foreach h,$(HAVE_NOT), $(firstword $(subst =, ,$h)))

#
#  Determine the system build config
#
ifndef HAVE_CONFIG
HAVE_CONFIG=1

ifeq ($(shell uname -s),SunOS)
	CONFIG_LDFLAGS += -lsocket -lnsl
endif

ifndef $(HAVE_LIB_AIO)
HAVE_LIB_AIO = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_aio)
ifeq ($(HAVE_LIB_AIO),1)
	CONFIG_CFLAGS += -DHAVE_LIB_AIO
	CONFIG_LDFLAGS += $(LIB_AIO)
$(info autoconfig: using $(LIB_AIO))
endif
endif

ifndef $(HAVE_LIB_BSD)
HAVE_LIB_BSD = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_bsd)
ifeq ($(HAVE_LIB_BSD),1)
	CONFIG_CFLAGS += -DHAVE_LIB_BSD
	CONFIG_LDFLAGS += $(LIB_BSD)
$(info autoconfig: using -lbsd functions)
endif
endif

ifndef $(HAVE_LIB_CRYPT)
HAVE_LIB_CRYPT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_crypt)
ifeq ($(HAVE_LIB_CRYPT),1)
	CONFIG_CFLAGS += -DHAVE_LIB_CRYPT
	CONFIG_LDFLAGS += $(LIB_CRYPT)
$(info autoconfig: using $(LIB_CRYPT))
endif
endif

ifndef $(HAVE_LIB_PTHREAD_SPINLOCK)
HAVE_LIB_PTHREAD_SPINLOCK = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_pthread_spinlock)
ifeq ($(HAVE_LIB_PTHREAD_SPINLOCK),1)
	CONFIG_CFLAGS += -DHAVE_LIB_PTHREAD_SPINLOCK
$(info autoconfig: using pthread spinlock)
endif
endif

ifndef $(HAVE_LIB_RT)
HAVE_LIB_RT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_rt)
ifeq ($(HAVE_LIB_RT),1)
	CONFIG_CFLAGS += -DHAVE_LIB_RT
	CONFIG_LDFLAGS += $(LIB_RT)
$(info autoconfig: using $(LIB_RT))
endif
endif

ifndef $(HAVE_LIB_SCTP)
HAVE_LIB_SCTP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_sctp)
ifeq ($(HAVE_LIB_SCTP),1)
	CONFIG_CFLAGS += -DHAVE_LIB_SCTP
	CONFIG_LDFLAGS += $(LIB_SCTP)
$(info autoconfig: using $(LIB_SCTP))
endif
endif

ifndef $(HAVE_LIB_Z)
HAVE_LIB_Z = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_z)
ifeq ($(HAVE_LIB_Z),1)
	CONFIG_CFLAGS += -DHAVE_LIB_Z
	CONFIG_LDFLAGS += $(LIB_Z)
$(info autoconfig: using $(LIB_Z))
endif
endif

ifndef $(HAVE_LIB_DL)
HAVE_LIB_DL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_dl)
ifeq ($(HAVE_LIB_DL),1)
	CONFIG_CFLAGS += -DHAVE_LIB_DL
	CONFIG_LDFLAGS += $(LIB_DL)
$(info autoconfig: using $(LIB_DL))
endif
endif

#
#  Always add in pthread lib last to resolve pthread linker issues
#
ifndef $(HAVE_LIB_PTHREAD)
HAVE_LIB_PTHREAD = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lib_pthread)
ifeq ($(HAVE_LIB_PTHREAD),1)
	CONFIG_CFLAGS += -DHAVE_LIB_PTHREAD
	CONFIG_LDFLAGS += $(LIB_PTHREAD)
$(info autoconfig: using $(LIB_PTHREAD))
endif
endif

ifndef $(HAVE_APPARMOR)
HAVE_APPARMOR = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_apparmor)
ifeq ($(HAVE_APPARMOR),1)
	CONFIG_OBJS += apparmor-data.o
	CONFIG_CFLAGS += -DHAVE_APPARMOR
	CONFIG_LDFLAGS += $(LIB_APPARMOR)
$(info autoconfig: using $(LIB_APPARMOR))
endif
endif

ifndef $(HAVE_BSD_WCHAR)
HAVE_BSD_WCHAR = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_bsd_wchar)
ifeq ($(HAVE_BSD_WCHAR),1)
	CONFIG_CFLAGS += -DHAVE_BSD_WCHAR
$(info autoconfig: using bsd/wchar.h)
endif
endif

ifndef $(HAVE_WCHAR)
HAVE_WCHAR = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_wchar)
ifeq ($(HAVE_WCHAR),1)
	CONFIG_CFLAGS += -DHAVE_WCHAR
$(info autoconfig: using wchar.h)
endif
endif

ifndef $(HAVE_KEYUTILS_H)
HAVE_KEYUTILS_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=keyutils.h have_header_h)
ifeq ($(HAVE_KEYUTILS_H),1)
	CONFIG_CFLAGS += -DHAVE_KEYUTILS_H
$(info autoconfig: using keyutils.h)
endif
endif

ifndef $(HAVE_GRP_H)
HAVE_GRP_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=grp.h have_header_h)
ifeq ($(HAVE_GRP_H),1)
	CONFIG_CFLAGS += -DHAVE_GRP_H
$(info autoconfig: using grp.h)
endif
endif

ifndef $(HAVE_ATTR_XATTR_H)
HAVE_ATTR_XATTR_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=attr/xattr.h have_header_h)
ifeq ($(HAVE_ATTR_XATTR_H),1)
	CONFIG_CFLAGS += -DHAVE_ATTR_XATTR_H
$(info autoconfig: using attr/xattr.h)
endif
endif

ifndef $(HAVE_SYS_XATTR_H)
HAVE_SYS_XATTR_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=sys/xattr.h have_header_h)
ifeq ($(HAVE_SYS_XATTR_H),1)
	CONFIG_CFLAGS += -DHAVE_SYS_XATTR_H
$(info autoconfig: using sys/xattr.h)
endif
endif

ifndef $(HAVE_SYS_CAP_H)
HAVE_SYS_CAP_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sys_cap_h)
ifeq ($(HAVE_SYS_CAP_H),1)
	CONFIG_CFLAGS += -DHAVE_SYS_CAP_H
$(info autoconfig: using sys/capability.h)
endif
endif

ifndef $(HAVE_SYSCALL_H)
HAVE_SYSCALL_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=sys/syscall.h have_header_h)
ifeq ($(HAVE_SYSCALL_H),1)
	CONFIG_CFLAGS += -DHAVE_SYSCALL_H
$(info autoconfig: using sys/syscall.h)
endif
endif

ifndef $(HAVE_LINUX_DM_IOCTL_H)
HAVE_LINUX_DM_IOCTL_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/dm-ioctl.h have_header_h)
ifeq ($(HAVE_LINUX_DM_IOCTL_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_DM_IOCTL_H
$(info autoconfig: using linux/dm-ioctl.h)
endif
endif

ifndef $(HAVE_LINUX_FIEMAP_H)
HAVE_LINUX_FIEMAP_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/fiemap.h have_header_h)
ifeq ($(HAVE_LINUX_FIEMAP_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_FIEMAP_H
$(info autoconfig: using linux/fiemap.h)
endif
endif

ifndef $(HAVE_LINUX_MEDIA_H)
HAVE_LINUX_MEDIA_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/media.h have_header_h)
ifeq ($(HAVE_LINUX_MEDIA_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_MEDIA_H
$(info autoconfig: using linux/media.h)
endif
endif

ifndef $(HAVE_LINUX_PERF_EVENT_H)
HAVE_LINUX_PERF_EVENT_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/perf_event.h have_header_h)
ifeq ($(HAVE_LINUX_PERF_EVENT_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_PERF_EVENT_H
$(info autoconfig: using linux/perf_event.h)
endif
endif

ifndef $(HAVE_SECCOMP_H)
HAVE_SECCOMP_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/seccomp.h have_header_h)
ifeq ($(HAVE_SECCOMP_H),1)
	CONFIG_CFLAGS += -DHAVE_SECCOMP_H
$(info autoconfig: using linux/seccomp.h)
endif
endif

ifndef $(HAVE_LINUX_RANDOM_H)
HAVE_LINUX_RANDOM_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/random.h have_header_h)
ifeq ($(HAVE_LINUX_RANDOM_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_RANDOM_H
$(info autoconfig: using linux/random.h)
endif
endif

ifndef $(HAVE_SOCK_DIAG_H)
HAVE_SOCK_DIAG_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sock_diag_h)
ifeq ($(HAVE_SOCK_DIAG_H),1)
	CONFIG_CFLAGS += -DHAVE_SOCK_DIAG_H
$(info autoconfig: using linux/sock_diag.h)
endif
endif

ifndef $(HAVE_LINUX_VT_H)
HAVE_LINUX_VT_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/vt.h have_header_h)
ifeq ($(HAVE_LINUX_VT_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_VT_H
$(info autoconfig: using linux/vt.h)
endif
endif

ifndef $(HAVE_LINUX_VIDEODEV2_H)
HAVE_LINUX_VIDEODEV2_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=linux/videodev2.h have_header_h)
ifeq ($(HAVE_LINUX_VIDEODEV2_H),1)
	CONFIG_CFLAGS += -DHAVE_LINUX_VIDEODEV2_H
$(info autoconfig: using linux/videodev2.h)
endif
endif

ifndef $(HAVE_SCSI_SCSI_H)
HAVE_SCSI_SCSI_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=scsi/scsi.h have_header_h)
ifeq ($(HAVE_SCSI_SCSI_H),1)
	CONFIG_CFLAGS += -DHAVE_SCSI_SCSI_H
$(info autoconfig: using scsi/scsi.h)
endif
endif

ifndef $(HAVE_SCSI_SG_H)
HAVE_SCSI_SG_H = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) HEADER=scsi/sg.h have_header_h)
ifeq ($(HAVE_SCSI_SG_H),1)
	CONFIG_CFLAGS += -DHAVE_SCSI_SG_H
$(info autoconfig: using scsi/sg.h)
endif
endif

ifndef $(HAVE_FLOAT_DECIMAL32)
HAVE_FLOAT_DECIMAL32 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=_Decimal32 have_float)
ifeq ($(HAVE_FLOAT_DECIMAL32),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT_DECIMAL32
$(info autoconfig: using float decimal32 support)
endif
endif

ifndef $(HAVE_FLOAT_DECIMAL64)
HAVE_FLOAT_DECIMAL64 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=_Decimal64 have_float)
ifeq ($(HAVE_FLOAT_DECIMAL64),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT_DECIMAL64
$(info autoconfig: using float decimal64 support)
endif
endif

ifndef $(HAVE_FLOAT_DECIMAL128)
HAVE_FLOAT_DECIMAL128 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=_Decimal128 have_float)
ifeq ($(HAVE_FLOAT_DECIMAL128),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT_DECIMAL128
$(info autoconfig: using float decimal128 support)
endif
endif

ifndef $(HAVE_FLOAT16)
HAVE_FLOAT16 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=__fp16 have_float)
ifeq ($(HAVE_FLOAT16),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT16
$(info autoconfig: using float16 support)
endif
endif

ifndef $(HAVE_FLOAT32)
HAVE_FLOAT32 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=_Float32 have_float)
ifeq ($(HAVE_FLOAT32),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT32
$(info autoconfig: using float32 support)
endif
endif

ifndef $(HAVE_FLOAT80)
HAVE_FLOAT80 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=__float80 have_float)
ifeq ($(HAVE_FLOAT80),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT80
$(info autoconfig: using float80 support)
endif
endif

ifndef $(HAVE_FLOAT128)
HAVE_FLOAT128 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) FLOAT_TYPE=__float128 have_float)
ifeq ($(HAVE_FLOAT128),1)
	CONFIG_CFLAGS += -DHAVE_FLOAT128
$(info autoconfig: using float128 support)
endif
endif

ifndef $(HAVE_VECMATH)
HAVE_VECMATH = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_vecmath)
ifeq ($(HAVE_VECMATH),1)
	CONFIG_CFLAGS += -DHAVE_VECMATH
$(info autoconfig: using vector math support)
endif
endif

ifndef $(HAVE_ATOMIC)
HAVE_ATOMIC = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_atomic)
ifeq ($(HAVE_ATOMIC),1)
	CONFIG_CFLAGS += -DHAVE_ATOMIC
$(info autoconfig: using atomic support)
endif
endif

ifndef $(HAVE_ASM_NOP)
HAVE_ASM_NOP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_asm_nop)
ifeq ($(HAVE_ASM_NOP),1)
	CONFIG_CFLAGS += -DHAVE_ASM_NOP
$(info autoconfig: using nop assembler instruction)
endif
endif

ifndef $(HAVE_ALIGNED_64)
HAVE_ALIGNED_64 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_aligned_64)
ifeq ($(HAVE_ALIGNED_64),1)
	CONFIG_CFLAGS += -DHAVE_ALIGNED_64
$(info autoconfig: using 64 byte alignment attribute)
endif
endif

ifndef $(HAVE_ALIGNED_128)
HAVE_ALIGNED_128 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_aligned_128)
ifeq ($(HAVE_ALIGNED_128),1)
	CONFIG_CFLAGS += -DHAVE_ALIGNED_128
$(info autoconfig: using 128 byte alignment attribute)
endif
endif

ifndef $(HAVE_ALIGNED_64K)
HAVE_ALIGNED_64K = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_aligned_64K)
ifeq ($(HAVE_ALIGNED_64K),1)
	CONFIG_CFLAGS += -DHAVE_ALIGNED_64K
$(info autoconfig: using 64K byte alignment attribute)
endif
endif

ifndef $(HAVE_ACCEPT4)
HAVE_ACCEPT4 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_accept4)
ifeq ($(HAVE_ACCEPT4),1)
	CONFIG_CFLAGS += -DHAVE_ACCEPT4
$(info autoconfig: using accept4)
endif
endif

ifndef $(HAVE_AFFINITY)
HAVE_AFFINITY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_affinity)
ifeq ($(HAVE_AFFINITY),1)
	CONFIG_CFLAGS += -DHAVE_AFFINITY
$(info autoconfig: using sched affinity CPU masks)
endif
endif

ifndef $(HAVE_MADVISE)
HAVE_MADVISE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_madvise)
ifeq ($(HAVE_MADVISE),1)
	CONFIG_CFLAGS += -DHAVE_MADVISE
$(info autoconfig: using madvise)
endif
endif

ifndef $(HAVE_NANOSLEEP)
HAVE_NANOSLEEP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_nanosleep)
ifeq ($(HAVE_NANOSLEEP),1)
	CONFIG_CFLAGS += -DHAVE_NANOSLEEP
$(info autoconfig: using nanosleep)
endif
endif

ifndef $(HAVE_PTRACE)
HAVE_PTRACE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_ptrace)
ifeq ($(HAVE_PTRACE),1)
	CONFIG_CFLAGS += -DHAVE_PTRACE
$(info autoconfig: using ptrace)
endif
endif

ifndef $(HAVE_SEM_POSIX)
HAVE_SEM_POSIX = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sem_posix)
ifeq ($(HAVE_SEM_POSIX),1)
	CONFIG_CFLAGS += -DHAVE_SEM_POSIX
$(info autoconfig: using POSIX semaphores)
endif
endif

ifndef $(HAVE_SEM_SYSV)
HAVE_SEM_SYSV = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sem_sysv)
ifeq ($(HAVE_SEM_SYSV),1)
	CONFIG_CFLAGS += -DHAVE_SEM_SYSV
$(info autoconfig: using SYSV semaphores)
endif
endif

ifndef $(HAVE_MQ_POSIX)
HAVE_MQ_POSIX = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mq_posix)
ifeq ($(HAVE_MQ_POSIX),1)
	CONFIG_CFLAGS += -DHAVE_MQ_POSIX
$(info autoconfig: using POSIX message queues)
endif
endif

ifndef $(HAVE_MQ_SYSV)
HAVE_MQ_SYSV = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mq_sysv)
ifeq ($(HAVE_MQ_SYSV),1)
	CONFIG_CFLAGS += -DHAVE_MQ_SYSV
$(info autoconfig: using SYSV message queues)
endif
endif

ifndef $(HAVE_SHM_SYSV)
HAVE_SHM_SYSV = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_shm_sysv)
ifeq ($(HAVE_SHM_SYSV),1)
	CONFIG_CFLAGS += -DHAVE_SHM_SYSV
$(info autoconfig: using SYSV shared memory)
endif
endif

ifndef $(HAVE_FACCESSAT)
HAVE_FACCESSAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_faccessat)
ifeq ($(HAVE_FACCESSAT),1)
	CONFIG_CFLAGS += -DHAVE_FACCESSAT
$(info autoconfig: using faccessat)
endif
endif

ifndef $(HAVE_FANOTIFY)
HAVE_FANOTIFY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_fanotify)
ifeq ($(HAVE_FANOTIFY),1)
	CONFIG_CFLAGS += -DHAVE_FANOTIFY
$(info autoconfig: using fanotify)
endif
endif

ifndef $(HAVE_INOTIFY)
HAVE_INOTIFY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_inotify)
ifeq ($(HAVE_INOTIFY),1)
	CONFIG_CFLAGS += -DHAVE_INOTIFY
$(info autoconfig: using inotify)
endif
endif

ifndef $(HAVE_SWAPCONTEXT)
HAVE_SWAPCONTEXT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_swapcontext)
ifeq ($(HAVE_SWAPCONTEXT),1)
	CONFIG_CFLAGS += -DHAVE_SWAPCONTEXT
$(info autoconfig: using swapcontext)
endif
endif

ifndef $(HAVE_CHROOT)
HAVE_CHROOT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_chroot)
ifeq ($(HAVE_CHROOT),1)
	CONFIG_CFLAGS += -DHAVE_CHROOT
$(info autoconfig: using chroot)
endif
endif

ifndef $(HAVE_EVENTFD)
HAVE_EVENTFD = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_eventfd)
ifeq ($(HAVE_EVENTFD),1)
	CONFIG_CFLAGS += -DHAVE_EVENTFD
$(info autoconfig: using eventfd)
endif
endif

ifndef $(HAVE_CABSL)
MATHFUNC=cabsl
export MATHFUNC
HAVE_CABSL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=cabsl have_mathfunc)
ifeq ($(HAVE_CABSL),1)
	CONFIG_CFLAGS += -DHAVE_CABSL
$(info autoconfig: using cabsl)
endif
endif

ifndef $(HAVE_LGAMMAL)
MATHFUNC=lgammal
export MATHFUNC
HAVE_LGAMMAL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=lgammal have_mathfunc)
ifeq ($(HAVE_LGAMMAL),1)
	CONFIG_CFLAGS += -DHAVE_LGAMMAL
$(info autoconfig: using lgammal)
endif
endif

ifndef $(HAVE_CCOSL)
MATHFUNC=ccosl
export MATHFUNC
HAVE_CCOSL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=ccosl have_mathfunc)
ifeq ($(HAVE_CCOSL),1)
	CONFIG_CFLAGS += -DHAVE_CCOSL
$(info autoconfig: using ccosl)
endif
endif

ifndef $(HAVE_CSINL)
MATHFUNC=csinl
export MATHFUNC
HAVE_CSINL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=csinl have_mathfunc)
ifeq ($(HAVE_CSINL),1)
	CONFIG_CFLAGS += -DHAVE_CSINL
$(info autoconfig: using csinl)
endif
endif

ifndef $(HAVE_CPOW)
MATHFUNC=cpow
export MATHFUNC
HAVE_CPOW = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=cpow have_mathfunc)
ifeq ($(HAVE_CPOW),1)
	CONFIG_CFLAGS += -DHAVE_CPOW
$(info autoconfig: using cpow)
endif
endif

ifndef $(HAVE_POWL)
MATHFUNC=powl
export MATHFUNC
HAVE_POWL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=powl have_mathfunc)
ifeq ($(HAVE_POWL),1)
	CONFIG_CFLAGS += -DHAVE_POWL
$(info autoconfig: using powl)
endif
endif

ifndef $(HAVE_RINTL)
MATHFUNC=rintl
export MATHFUNC
HAVE_RINTL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=rintl have_mathfunc)
ifeq ($(HAVE_RINTL),1)
	CONFIG_CFLAGS += -DHAVE_RINTL
$(info autoconfig: using rintl)
endif
endif

ifndef $(HAVE_LOGL)
MATHFUNC=logl
export MATHFUNC
HAVE_LOGL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=logl have_mathfunc)
ifeq ($(HAVE_LOGL),1)
	CONFIG_CFLAGS += -DHAVE_LOGL
$(info autoconfig: using logl)
endif
endif

ifndef $(HAVE_EXPL)
MATHFUNC=expl
export MATHFUNC
HAVE_EXPL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=expl have_mathfunc)
ifeq ($(HAVE_EXPL),1)
	CONFIG_CFLAGS += -DHAVE_EXPL
$(info autoconfig: using expl)
endif
endif

ifndef $(HAVE_COSL)
MATHFUNC=cosl
export MATHFUNC
HAVE_COSL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=cosl have_mathfunc)
ifeq ($(HAVE_COSL),1)
	CONFIG_CFLAGS += -DHAVE_COSL
$(info autoconfig: using cosl)
endif
endif

ifndef $(HAVE_SINL)
MATHFUNC=sinl
export MATHFUNC
HAVE_SINL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=sinl have_mathfunc)
ifeq ($(HAVE_SINL),1)
	CONFIG_CFLAGS += -DHAVE_SINL
$(info autoconfig: using sinl)
endif
endif

ifndef $(HAVE_COSHL)
MATHFUNC=coshl
export MATHFUNC
HAVE_COSHL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=coshl have_mathfunc)
ifeq ($(HAVE_COSHL),1)
	CONFIG_CFLAGS += -DHAVE_COSHL
$(info autoconfig: using coshl)
endif
endif

ifndef $(HAVE_SINHL)
MATHFUNC=sinhl
export MATHFUNC
HAVE_SINHL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=sinhl have_mathfunc)
ifeq ($(HAVE_SINHL),1)
	CONFIG_CFLAGS += -DHAVE_SINHL
$(info autoconfig: using sinhl)
endif
endif

ifndef $(HAVE_SQRTL)
MATHFUNC=sqrtl
export MATHFUNC
HAVE_SQRTL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) MATHFUNC=sqrtl have_mathfunc)
ifeq ($(HAVE_SQRTL),1)
	CONFIG_CFLAGS += -DHAVE_SQRTL
$(info autoconfig: using sqrtl)
endif
endif

ifndef $(HAVE_STRLCAT)
STRFUNC=strlcat
export STRFUNC
HAVE_STRLCAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) STRFUNC=strlcat have_strfunc)
ifeq ($(HAVE_STRLCAT),1)
	CONFIG_CFLAGS += -DHAVE_STRLCAT
$(info autoconfig: using strlcat)
endif
endif

ifndef $(HAVE_STRLCPY)
STRFUNC=strlcpy
export STRFUNC
HAVE_STRLCPY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) STRFUNC=strlcpy have_strfunc)
ifeq ($(HAVE_STRLCPY),1)
	CONFIG_CFLAGS += -DHAVE_STRLCPY
$(info autoconfig: using strlcpy)
endif
endif

ifndef $(HAVE_WCSCHR)
WCSFUNC=wcschr
export WCSFUNC
HAVE_WCSCHR = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcschr have_wcsfunc)
ifeq ($(HAVE_WCSCHR),1)
	CONFIG_CFLAGS += -DHAVE_WCSCHR
$(info autoconfig: using wcschr)
endif
endif

ifndef $(HAVE_WCSRCHR)
WCSFUNC=wcsrchr
export WCSFUNC
HAVE_WCSRCHR = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcsrchr have_wcsfunc)
ifeq ($(HAVE_WCSRCHR),1)
	CONFIG_CFLAGS += -DHAVE_WCSRCHR
$(info autoconfig: using wcsrchr)
endif
endif

ifndef $(HAVE_WCSCOLL)
WCSFUNC=wcscoll
export WCSFUNC
HAVE_WCSCOLL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcscoll have_wcsfunc)
ifeq ($(HAVE_WCSCOLL),1)
	CONFIG_CFLAGS += -DHAVE_WCSCOLL
$(info autoconfig: using wcscoll)
endif
endif

ifndef $(HAVE_WCSXFRM)
WCSFUNC=wcsxfrm
export WCSFUNC
HAVE_WCSXFRM = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcsxfrm have_wcsfunc)
ifeq ($(HAVE_WCSXFRM),1)
	CONFIG_CFLAGS += -DHAVE_WCSXFRM
$(info autoconfig: using wcsxfrm)
endif
endif


ifndef $(HAVE_WCSCMP)
WCSFUNC=wcscmp
export WCSFUNC
HAVE_WCSCMP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcscmp have_wcsfunc)
ifeq ($(HAVE_WCSCMP),1)
	CONFIG_CFLAGS += -DHAVE_WCSCMP
$(info autoconfig: using wcscmp)
endif
endif

ifndef $(HAVE_WCSNCMP)
WCSFUNC=wcsncmp
export WCSFUNC
HAVE_WCSNCMP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcsncmp have_wcsfunc)
ifeq ($(HAVE_WCSNCMP),1)
	CONFIG_CFLAGS += -DHAVE_WCSNCMP
$(info autoconfig: using wcsncmp)
endif
endif

ifndef $(HAVE_WCSCPY)
WCSFUNC=wcscpy
export WCSFUNC
HAVE_WCSCPY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcscpy have_wcsfunc)
ifeq ($(HAVE_WCSCPY),1)
	CONFIG_CFLAGS += -DHAVE_WCSCPY
$(info autoconfig: using wcscpy)
endif
endif

ifndef $(HAVE_WCSLEN)
WCSFUNC=wcslen
export WCSFUNC
HAVE_WCSLEN = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcslen have_wcsfunc)
ifeq ($(HAVE_WCSLEN),1)
	CONFIG_CFLAGS += -DHAVE_WCSLEN
$(info autoconfig: using wcslen)
endif
endif

ifndef $(HAVE_WCSNCAT)
WCSFUNC=wcsncat
export WCSFUNC
HAVE_WCSNCAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcsncat have_wcsfunc)
ifeq ($(HAVE_WCSNCAT),1)
	CONFIG_CFLAGS += -DHAVE_WCSNCAT
$(info autoconfig: using wcsncat)
endif
endif

ifndef $(HAVE_WCSCAT)
WCSFUNC=wcscat
export WCSFUNC
HAVE_WCSCAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcscat have_wcsfunc)
ifeq ($(HAVE_WCSCAT),1)
	CONFIG_CFLAGS += -DHAVE_WCSCAT
$(info autoconfig: using wcscat)
endif
endif

ifndef $(HAVE_WCSLCAT)
WCSFUNC=wcslcat
export WCSFUNC
HAVE_WCSLCAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcslcat have_wcsfunc)
ifeq ($(HAVE_WCSLCAT),1)
	CONFIG_CFLAGS += -DHAVE_WCSLCAT
$(info autoconfig: using wcslcat)
endif
endif

ifndef $(HAVE_WCSLCPY)
WCSFUNC=wcslcpy
export WCSFUNC
HAVE_WCSLCPY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcslcpy have_wcsfunc)
ifeq ($(HAVE_WCSLCPY),1)
	CONFIG_CFLAGS += -DHAVE_WCSLCPY
$(info autoconfig: using wcslcpy)
endif
endif

ifndef $(HAVE_HAVE_WCSCASECMP)
WCSFUNC=wcscasecmp
export WCSFUNC
HAVE_WCSCASECMP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcscasecmp have_wcsfunc)
ifeq ($(HAVE_WCSCASECMP),1)
	CONFIG_CFLAGS += -DHAVE_WCSCASECMP
$(info autoconfig: using wcscasecmp)
endif
endif

ifndef $(HAVE_WCSNCASECMP)
WCSFUNC=wcsncasecmp
export WCSFUNC
HAVE_WCSNCASECMP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) WCSFUNC=wcsncasecmp have_wcsfunc)
ifeq ($(HAVE_WCSNCASECMP),1)
	CONFIG_CFLAGS += -DHAVE_WCSNCASECMP
$(info autoconfig: using wcsncasecmp)
endif
endif

ifndef $(HAVE_DUP3)
HAVE_DUP3 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_dup3)
ifeq ($(HAVE_DUP3),1)
	CONFIG_CFLAGS += -DHAVE_DUP3
$(info autoconfig: using dup3)
endif
endif

ifndef $(HAVE_EPOLL_CREATE1)
HAVE_EPOLL_CREATE1 = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_epoll_create1)
ifeq ($(HAVE_EPOLL_CREATE1),1)
	CONFIG_CFLAGS += -DHAVE_EPOLL_CREATE1
$(info autoconfig: using epoll_create1)
endif
endif

ifndef $(HAVE_GETPAGESIZE)
HAVE_GETPAGESIZE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_getpagesize)
ifeq ($(HAVE_GETPAGESIZE),1)
	CONFIG_CFLAGS += -DHAVE_GETPAGESIZE
$(info autoconfig: using getpagesize)
endif
endif

ifndef $(HAVE_GETPGRP)
HAVE_GETPGRP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_getpgrp)
ifeq ($(HAVE_GETPGRP),1)
	CONFIG_CFLAGS += -DHAVE_GETPGRP
$(info autoconfig: using getpgrp)
endif
endif

ifndef $(HAVE_SETPGRP)
HAVE_SETPGRP = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setpgrp)
ifeq ($(HAVE_SETPGRP),1)
	CONFIG_CFLAGS += -DHAVE_SETPGRP
$(info autoconfig: using setpgrp)
endif
endif

ifndef $(HAVE_GETPGID)
HAVE_GETPGID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_getpgid)
ifeq ($(HAVE_GETPGID),1)
	CONFIG_CFLAGS += -DHAVE_GETPGID
$(info autoconfig: using getpgid)
endif
endif

ifndef $(HAVE_SETPGID)
HAVE_SETPGID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setpgid)
ifeq ($(HAVE_SETPGID),1)
	CONFIG_CFLAGS += -DHAVE_SETPGID
$(info autoconfig: using setpgid)
endif
endif


ifndef $(HAVE_MLOCK)
HAVE_MLOCK = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mlock)
ifeq ($(HAVE_MLOCK),1)
	CONFIG_CFLAGS += -DHAVE_MLOCK
$(info autoconfig: using mlock)
endif
endif

ifndef $(HAVE_MLOCKALL)
HAVE_MLOCKALL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mlockall)
ifeq ($(HAVE_MLOCKALL),1)
	CONFIG_CFLAGS += -DHAVE_MLOCKALL
$(info autoconfig: using mlockall and munlockall)
endif
endif

ifndef $(HAVE_PERSONALITY)
HAVE_PERSONALITY = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_personality)
ifeq ($(HAVE_PERSONALITY),1)
	CONFIG_CFLAGS += -DHAVE_PERSONALITY
$(info autoconfig: using personality)
endif
endif

ifndef $(HAVE_PPOLL)
HAVE_PPOLL = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_ppoll)
ifeq ($(HAVE_PPOLL),1)
	CONFIG_CFLAGS += -DHAVE_PPOLL
$(info autoconfig: using ppoll)
endif
endif

ifndef $(HAVE_PSELECT)
HAVE_PSELECT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_pselect)
ifeq ($(HAVE_PSELECT),1)
	CONFIG_CFLAGS += -DHAVE_PSELECT
$(info autoconfig: using pselect)
endif
endif

ifndef $(HAVE_SETNS)
HAVE_SETNS = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setns)
ifeq ($(HAVE_SETNS),1)
	CONFIG_CFLAGS += -DHAVE_SETNS
$(info autoconfig: using setns)
endif
endif

ifndef $(HAVE_SETREUID)
HAVE_SETREUID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setreuid)
ifeq ($(HAVE_SETREUID),1)
	CONFIG_CFLAGS += -DHAVE_SETREUID
$(info autoconfig: using setreuid)
endif
endif

ifndef $(HAVE_SETREGID)
HAVE_SETREGID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setregid)
ifeq ($(HAVE_SETREGID),1)
	CONFIG_CFLAGS += -DHAVE_SETREGID
$(info autoconfig: using setregid)
endif
endif

ifndef $(HAVE_SETRESUID)
HAVE_SETRESUID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setresuid)
ifeq ($(HAVE_SETRESUID),1)
	CONFIG_CFLAGS += -DHAVE_SETRESUID
$(info autoconfig: using setresuid)
endif
endif

ifndef $(HAVE_SETRESGID)
HAVE_SETRESGID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_setresgid)
ifeq ($(HAVE_SETRESGID),1)
	CONFIG_CFLAGS += -DHAVE_SETRESGID
$(info autoconfig: using setresgid)
endif
endif

ifndef $(HAVE_SIGALTSTACK)
HAVE_SIGALTSTACK = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sigaltstack)
ifeq ($(HAVE_SIGALTSTACK),1)
	CONFIG_CFLAGS += -DHAVE_SIGALTSTACK
$(info autoconfig: using sigaltstack)
endif
endif

ifndef $(HAVE_SIGQUEUE)
HAVE_SIGQUEUE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sigqueue)
ifeq ($(HAVE_SIGQUEUE),1)
	CONFIG_CFLAGS += -DHAVE_SIGQUEUE
$(info autoconfig: using sigqueue)
endif
endif

ifndef $(HAVE_SIGWAITINFO)
HAVE_SIGWAITINFO = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_sigwaitinfo)
ifeq ($(HAVE_SIGWAITINFO),1)
	CONFIG_CFLAGS += -DHAVE_SIGWAITINFO
$(info autoconfig: using sigwaitinfo)
endif
endif

ifndef $(HAVE_MODIFY_LDT)
HAVE_MODIFY_LDT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_modify_ldt)
ifeq ($(HAVE_MODIFY_LDT),1)
	CONFIG_CFLAGS += -DHAVE_MODIFY_LDT
$(info autoconfig: using modify_ldt)
endif
endif

ifndef $(HAVE_MPROTECT)
HAVE_MPROTECT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mprotect)
ifeq ($(HAVE_MPROTECT),1)
	CONFIG_CFLAGS += -DHAVE_MPROTECT
$(info autoconfig: using mprotect)
endif
endif

ifndef $(HAVE_MSYNC)
HAVE_MSYNC = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_msync)
ifeq ($(HAVE_MSYNC),1)
	CONFIG_CFLAGS += -DHAVE_MSYNC
$(info autoconfig: using msync)
endif
endif

ifndef $(HAVE_MINCORE)
HAVE_MINCORE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_mincore)
ifeq ($(HAVE_MINCORE),1)
	CONFIG_CFLAGS += -DHAVE_MINCORE
$(info autoconfig: using mincore)
endif
endif

ifndef $(HAVE_POSIX_FADVISE)
HAVE_POSIX_FADVISE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_posix_fadvise)
ifeq ($(HAVE_POSIX_FADVISE),1)
	CONFIG_CFLAGS += -DHAVE_POSIX_FADVISE
$(info autoconfig: using posix_fadvise)
endif
endif

ifndef $(HAVE_POSIX_OPENPT)
HAVE_POSIX_OPENPT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_posix_openpt)
ifeq ($(HAVE_POSIX_OPENPT),1)
	CONFIG_CFLAGS += -DHAVE_POSIX_OPENPT
$(info autoconfig: using posix_openpt)
endif
endif

ifndef $(HAVE_POSIX_MEMALIGN)
HAVE_POSIX_MEMALIGN = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_posix_memalign)
ifeq ($(HAVE_POSIX_MEMALIGN),1)
	CONFIG_CFLAGS += -DHAVE_POSIX_MEMALIGN
$(info autoconfig: using posix_memalign)
endif
endif

ifndef $(HAVE_PWRITEV)
HAVE_PWRITEV = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_pwritev)
ifeq ($(HAVE_PWRITEV),1)
	CONFIG_CFLAGS += -DHAVE_PWRITEV
$(info autoconfig: using pwritev)
endif
endif

ifndef $(HAVE_UNAME)
HAVE_UNAME = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_uname)
ifeq ($(HAVE_UNAME),1)
	CONFIG_CFLAGS += -DHAVE_UNAME
$(info autoconfig: using uname)
endif
endif

ifndef $(HAVE_USTAT)
HAVE_USTAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_ustat)
ifeq ($(HAVE_USTAT),1)
	CONFIG_CFLAGS += -DHAVE_USTAT
$(info autoconfig: using ustat)
endif
endif

ifndef $(HAVE_UTIMENSAT)
HAVE_UTIMENSAT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_utimensat)
ifeq ($(HAVE_UTIMENSAT),1)
	CONFIG_CFLAGS += -DHAVE_UTIMENSAT
$(info autoconfig: using utimensat)
endif
endif

ifndef $(HAVE_WAITID)
HAVE_WAITID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_waitid)
ifeq ($(HAVE_WAITID),1)
	CONFIG_CFLAGS += -DHAVE_WAITID
$(info autoconfig: using waitid)
endif
endif

ifndef $(HAVE_CPUID)
HAVE_CPUID = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_cpuid)
ifeq ($(HAVE_CPUID),1)
	CONFIG_CFLAGS += -DHAVE_CPUID
$(info autoconfig: using cpuid)
endif
endif

ifndef $(HAVE_GETMNTINFO)
HAVE_GETMNTINFO = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_getmntinfo)
ifeq ($(HAVE_GETMNTINFO),1)
	CONFIG_CFLAGS += -DHAVE_GETMNTINFO
$(info autoconfig: using getmntinfo)
endif
endif

ifndef $(HAVE_GETMNTENT)
HAVE_GETMNTENT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_getmntent)
ifeq ($(HAVE_GETMNTENT),1)
	CONFIG_CFLAGS += -DHAVE_GETMNTENT
$(info autoconfig: using getmntent)
endif
endif

ifndef $(HAVE_FUTIMES)
HAVE_FUTIMES = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_futimes)
ifeq ($(HAVE_FUTIMES),1)
	CONFIG_CFLAGS += -DHAVE_FUTIMES
$(info autoconfig: using futimes)
endif
endif

ifndef $(HAVE_FUTIMENS)
HAVE_FUTIMENS = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_futimens)
ifeq ($(HAVE_FUTIMENS),1)
	CONFIG_CFLAGS += -DHAVE_FUTIMENS
$(info autoconfig: using futimens)
endif
endif


ifndef $(HAVE_FSYNC)
HAVE_FSYNC = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_fsync)
ifeq ($(HAVE_FSYNC),1)
	CONFIG_CFLAGS += -DHAVE_FSYNC
$(info autoconfig: using fsync)
endif
endif

ifndef $(HAVE_FDATASYNC)
HAVE_FDATASYNC = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_fdatasync)
ifeq ($(HAVE_FDATASYNC),1)
	CONFIG_CFLAGS += -DHAVE_FDATASYNC
$(info autoconfig: using fdatasync)
endif
endif

ifndef $(HAVE_SYNCFS)
HAVE_SYNCFS = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_syncfs)
ifeq ($(HAVE_SYNCFS),1)
	CONFIG_CFLAGS += -DHAVE_SYNCFS
$(info autoconfig: using syncfs)
endif
endif

ifndef $(HAVE_LOCKF)
HAVE_LOCKF = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_lockf)
ifeq ($(HAVE_LOCKF),1)
	CONFIG_CFLAGS += -DHAVE_LOCKF
$(info autoconfig: using lockf)
endif
endif

ifndef $(HAVE_CLONE)
HAVE_CLONE = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) have_clone)
ifeq ($(HAVE_CLONE),1)
	CONFIG_CFLAGS += -DHAVE_CLONE
$(info autoconfig: using clone)
endif
endif

endif

.SUFFIXES: .c .o

#
#  save configuration
#
.PHONY: save_config
save_config:
	@echo $(foreach h,$(HAVE_VARS),$h=$($(h))) | tr ' ' '\n' > config
	@echo CONFIG_CFLAGS=$(CONFIG_CFLAGS) >> config
	@echo CONFIG_LDFLAGS=$(CONFIG_LDFLAGS) >> config
	@echo CONFIG_OBJS=$(CONFIG_OBJS) >> config
	@echo HAVE_CONFIG=1 >> config

#
#  check if we can build against AppArmor
#
.PHONY: have_apparmor
have_apparmor: $(DIR)/test-apparmor.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-apparmor.c $(LIB_APPARMOR) -o $(DIR)/test-apparmor 2> /dev/null || true
	@$(APPARMOR_PARSER) -Q usr.bin.pulseaudio.eg -o apparmor-data.bin 2> /dev/null; \
	if [ $$? -ne 0 ]; then \
		echo 0 ;\
	else \
		if [ -f $(DIR)/test-apparmor ]; then \
			if [ -x "$(APPARMOR_PARSER)" ]; then \
				if [ -f apparmor-data.bin ]; then \
					echo 1 ;\
				else \
					echo 0 ;\
				fi \
			else \
				echo 0 ;\
			fi \
		else \
			echo 0 ;\
		fi \
	fi
	@rm -f $(DIR)/test-apparmor apparmor-data.bin

#
#  check if we can build against libbsd
#
.PHONY: have_lib_bsd
have_lib_bsd: $(DIR)/test-libbsd.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libbsd.c $(LIB_BSD) -o $(DIR)/test-libbsd 2> /dev/null || true
	@if [ -f $(DIR)/test-libbsd ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libbsd

#
#  check if we can include bsd/wchar.h
#
.PHONY: have_bsd_wchar
have_bsd_wchar: $(DIR)/test-bsd-wchar.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-bsd-wchar.c -o $(DIR)/test-bsd-wchar 2> /dev/null || true
	@if [ -f $(DIR)/test-bsd-wchar ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-bsd-wchar

#
#  check if we can include wchar.h
#
.PHONY: have_wchar
have_wchar: $(DIR)/test-wchar.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-wchar.c -o $(DIR)/test-wchar 2> /dev/null || true
	@if [ -f $(DIR)/test-wchar ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-wchar

#
#  check if we can build against libz
#
.PHONY: have_lib_z
have_lib_z: $(DIR)/test-libz.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libz.c $(LIB_Z) -o $(DIR)/test-libz 2> /dev/null || true
	@if [ -f $(DIR)/test-libz ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libz

#
#  check if we can build against libdl
#
.PHONY: have_lib_dl
have_lib_dl: $(DIR)/test-libdl.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libdl.c $(LIB_DL) -o $(DIR)/test-libdl 2> /dev/null || true
	@if [ -f $(DIR)/test-libdl ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libdl

#
#  check if we can build against libcrypt
#
.PHONY: have_lib_crypt
have_lib_crypt: $(DIR)/test-libcrypt.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libcrypt.c $(LIB_CRYPT) -o $(DIR)/test-libcrypt 2> /dev/null || true
	@if [ -f $(DIR)/test-libcrypt ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libcrypt

#
#  check if we can build against librt
#
.PHONY: have_lib_rt
have_lib_rt: $(DIR)/test-librt.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-librt.c $(LIB_RT) -o $(DIR)/test-librt 2> /dev/null || true
	@if [ -f $(DIR)/test-librt ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-librt

#
#  check if we can build against libpthread
#
.PHONY: have_lib_pthread
have_lib_pthread: $(DIR)/test-libpthread.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libpthread.c $(LIB_PTHREAD) -o $(DIR)/test-libpthread 2> /dev/null || true
	@if [ -f $(DIR)/test-libpthread ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libpthread

#
#  check if we can build against libpthread
#
.PHONY: have_lib_pthread_spinlock
have_lib_pthread_spinlock: $(DIR)/test-libpthread-spinlock.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libpthread-spinlock.c $(LIB_PTHREAD) -o $(DIR)/test-libpthread-spinlock 2> /dev/null || true
	@if [ -f $(DIR)/test-libpthread-spinlock ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libpthread-spinlock

#
#  check if we can build against libsctp
#
.PHONY: have_lib_sctp
have_lib_sctp: $(DIR)/test-libsctp.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libsctp.c $(LIB_SCTP) -o $(DIR)/test-libsctp 2> /dev/null || true
	@if [ -f $(DIR)/test-libsctp ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libsctp

#
#  check if compiler supports a specifc floating point decimal format
#
.PHONY: have_float
have_float:
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DFLOAT=$(FLOAT_TYPE) -o $(DIR)/test-float $(DIR)/test-float.c -lm 2> /dev/null || true
	@if [ -f $(DIR)/test-float ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-float

#
#  check if we can build against libaio
#
.PHONY: have_lib_aio
have_lib_aio: $(DIR)/test-libaio.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-libaio.c $(LIB_AIO) -o $(DIR)/test-libaio 2> /dev/null || true
	@if [ -f $(DIR)/test-libaio ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-libaio

#
#  check if we can use assembler nop instruction
#
.PHONY: have_asm_nop
have_asm_nop: $(DIR)/test-asm-nop.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-asm-nop.c -o $(DIR)/test-asm-nop 2> /dev/null || true
	@if [ -f $(DIR)/test-asm-nop ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-asm-nop


#
#  check if we have sys/capability.h
#
.PHONY: have_sys_cap_h
have_sys_cap_h: $(DIR)/test-cap.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-cap.c -o $(DIR)/test-cap 2> /dev/null || true
	@if [ -f $(DIR)/test-cap ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-cap

#
#  check if we have sock_diag.h
#
.PHONY: have_sock_diag_h
have_sock_diag_h: $(DIR)/test-sock-diag.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sock-diag.c -o $(DIR)/test-sock-diag 2> /dev/null || true
	@if [ -f $(DIR)/test-sock-diag ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-sock-diag

#
#  check if we have a specific header
#
.PHONY: have_header_h
have_header_h:
	@echo "#include <sys/types.h>" > $(DIR)/test-header.c
	@echo "#include <$(HEADER)>" >> $(DIR)/test-header.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $(DIR)/test-header.o $(DIR)/test-header.c 2> /dev/null || true
	@if [ -f $(DIR)/test-header.o ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -f $(DIR)/test-header.o $(DIR)/test-header.c

#
#  check if we can build vecmath related code
#
.PHONY: have_vecmath
have_vecmath: stress-vecmath.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DHAVE_VECMATH -c -o stress-vecmath-test.o stress-vecmath.c 2> /dev/null || true
	@if [ -f stress-vecmath-test.o ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf stress-vecmath-test.o

#
#  check if we can build atomic related code
#
.PHONY: have_atomic
have_atomic: stress-atomic.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DTEST_ATOMIC_BUILD -DHAVE_ATOMIC stress-atomic.c -o stress-atomic-test 2> /dev/null || true
	@if [ -f stress-atomic-test ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf stress-atomic-test

#
#  check if we can build with data aligned to 64 byte boundaries
#
.PHONY: have_aligned_64
have_aligned_64: $(DIR)/test-aligned-64.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-aligned-64.c -o $(DIR)/test-aligned-64 2> /dev/null || true
	@if [ -f $(DIR)/test-aligned-64 ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-aligned-64

#
#  check if we can build with data aligned to 128 byte boundaries
#
.PHONY: have_aligned_128
have_aligned_128: $(DIR)/test-aligned-128.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-aligned-128.c -o $(DIR)/test-aligned-128 2> /dev/null || true
	@if [ -f $(DIR)/test-aligned-128 ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-aligned-128

#
#  check if we can build functions aligned to 64K byte boundaries
#
.PHONY: have_aligned_64K
have_aligned_64K: $(DIR)/test-aligned-64K.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-aligned-64K.c -o $(DIR)/test-aligned-64K 2> /dev/null || true
	@if [ -f $(DIR)/test-aligned-64K ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-aligned-64K

#
#  check if we can build using accept4
#
.PHONY: have_accept4
have_accept4: $(DIR)/test-affinity.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-accept4.c -o $(DIR)/test-accept4 2> /dev/null || true
	@if [ -f $(DIR)/test-accept4 ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-accept4

#
#  check if we can build using sched_set/get_affinity
#
.PHONY: have_affinity
have_affinity: $(DIR)/test-affinity.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-affinity.c -o $(DIR)/test-affinity 2> /dev/null || true
	@if [ -f $(DIR)/test-affinity ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-affinity

#
#  check if we can build using madvise
#
.PHONY: have_madvise
have_madvise: $(DIR)/test-madvise.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-madvise.c -o $(DIR)/test-madvise 2> /dev/null || true
	@if [ -f $(DIR)/test-madvise ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
		@rm -rf $(DIR)/test-madvise

#
#  check if we can build using nanosleep
#
.PHONY: have_nanosleep
have_nanosleep: $(DIR)/test-nanosleep.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-nanosleep.c -o $(DIR)/test-nanosleep 2> /dev/null || true
	@if [ -f $(DIR)/test-nanosleep ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
		@rm -rf $(DIR)/test-nanosleep

#
#  check if we can build using ptrace
#
.PHONY: have_ptrace
have_ptrace: $(DIR)/test-ptrace.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-ptrace.c -o $(DIR)/test-ptrace 2> /dev/null || true
	@if [ -f $(DIR)/test-ptrace ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
		@rm -rf $(DIR)/test-ptrace

#
#  check if we can build using POSIX semaphores
#
.PHONY: have_sem_posix
have_sem_posix: $(DIR)/test-sem-posix.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sem-posix.c -o $(DIR)/test-sem-posix -lpthread 2> /dev/null || true
	@if [ -f $(DIR)/test-sem-posix ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-sem-posix

#
#  check if we can build using SYSV semaphores
#
.PHONY: have_sem_sysv
have_sem_sysv: $(DIR)/test-sem-sysv.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sem-sysv.c -o $(DIR)/test-sem-sysv 2> /dev/null || true
	@if [ -f $(DIR)/test-sem-sysv ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-sem-sysv

#
#  check if we can build using POSIX message queues
#
.PHONY: have_mq_posix
have_mq_posix: $(DIR)/test-mq-posix.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mq-posix.c -o $(DIR)/test-mq-posix -lrt 2> /dev/null || true
	@if [ -f $(DIR)/test-mq-posix ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mq-posix

#
#  check if we can build using SYSV message queues
#
.PHONY: have_mq_sysv_
have_mq_sysv: $(DIR)/test-mq-sysv.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mq-sysv.c -o $(DIR)/test-mq-sysv 2> /dev/null || true
	@if [ -f $(DIR)/test-mq-sysv ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mq-sysv

#
#  check if we can build using SYSV shared memory
#
.PHONY: have_shm_sysv
have_shm_sysv: $(DIR)/test-shm-sysv.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-shm-sysv.c -o $(DIR)/test-shm-sysv 2> /dev/null || true
	@if [ -f $(DIR)/test-shm-sysv ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-shm-sysv

#
#  check if we can build using faccessat
#
.PHONY: have_faccessat
have_faccessat: $(DIR)/test-faccessat.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-faccessat.c -o $(DIR)/test-faccessat 2> /dev/null || true
	@if [ -f $(DIR)/test-faccessat ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-faccessat

#
#  check if we can build using fanotify
#
.PHONY: have_fanotify
have_fanotify: $(DIR)/test-fanotify.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-fanotify.c -o $(DIR)/test-fanotify 2> /dev/null || true
	@if [ -f $(DIR)/test-fanotify ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-fanotify

#
#  check if we can build using inotify
#
.PHONY: have_inotify
have_inotify: $(DIR)/test-inotify.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-inotify.c -o $(DIR)/test-inotify 2> /dev/null || true
	@if [ -f $(DIR)/test-inotify ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-inotify

#
#  check if we have specific math functions
#
.PHONY: have_mathfunc
have_mathfunc: $(DIR)/test-mathfunc.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DMATHFUNC=$(MATHFUNC) $(DIR)/test-mathfunc.c -o $(DIR)/test-mathfunc -lm 2> /dev/null || true
	@if [ -f $(DIR)/test-mathfunc ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mathfunc

#
#  check if we have specific string str* functions
#
.PHONY: have_strfunc
have_strfunc: $(DIR)/test-strfunc.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DSTRFUNC=$(STRFUNC) $(DIR)/test-strfunc.c -o $(DIR)/test-strfunc $(LIB_BSD) 2> /dev/null || true
	@if [ -f $(DIR)/test-strfunc ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-strfunc

#
#  check if we have specific wide string wcs* functions
#
.PHONY: have_wcsfunc
have_wcsfunc: $(DIR)/test-wcsfunc.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -DWCSFUNC=$(WCSFUNC) $(DIR)/test-wcsfunc.c -o $(DIR)/test-wcsfunc $(LIB_BSD) 2> /dev/null || true
	@if [ -f $(DIR)/test-wcsfunc ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-wcsfunc

#
#  check if we can build using swapcontext calls
#
.PHONY: have_swapcontext
have_swapcontext: $(DIR)/test-swapcontext.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-swapcontext.c -o $(DIR)/test-swapcontext 2> /dev/null || true
	@if [ -f $(DIR)/test-swapcontext ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-swapcontext

#
#  check if we can build using chroot calls
#
.PHONY: have_chroot
have_chroot: $(DIR)/test-chroot.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-chroot.c -o $(DIR)/test-chroot 2> /dev/null || true
	@if [ -f $(DIR)/test-chroot ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-chroot

#
#  check if we can build using eventfd calls
#
.PHONY: have_eventfd
have_eventfd: $(DIR)/test-eventfd.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-eventfd.c -o $(DIR)/test-eventfd 2> /dev/null || true
	@if [ -f $(DIR)/test-eventfd ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-eventfd

#
#  check if we have dup3
#
.PHONY: have_dup3
have_dup3: $(DIR)/test-dup3.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-dup3.c -o $(DIR)/test-dup3 2> /dev/null || true
	@if [ -f $(DIR)/test-dup3 ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-dup3

#
#  check if we have epoll_create1
#
.PHONY: have_epoll_create1
have_epoll_create1: $(DIR)/test-epoll-create1.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-epoll-create1.c -o $(DIR)/test-epoll-create1 2> /dev/null || true
	@if [ -f $(DIR)/test-epoll-create1 ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-epoll-create1
#
#  check if we have getpagesize
#
.PHONY: have_getpagesize
have_getpagesize: $(DIR)/test-getpagesize.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-getpagesize.c -o $(DIR)/test-getpagesize 2> /dev/null || true
	@if [ -f $(DIR)/test-getpagesize ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-getpagesize

#
#  check if we have getpgrp
#
.PHONY: have_getpgrp
have_getpgrp: $(DIR)/test-getpgrp.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-getpgrp.c -o $(DIR)/test-getpgrp 2> /dev/null || true
	@if [ -f $(DIR)/test-getpgrp ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-getpgrp

#
#  check if we have setpgrp
#
.PHONY: have_setpgrp
have_setpgrp: $(DIR)/test-setpgrp.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setpgrp.c -o $(DIR)/test-setpgrp 2> /dev/null || true
	@if [ -f $(DIR)/test-setpgrp ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setpgrp

#
#  check if we have getpgid
#
.PHONY: have_getpgid
have_getpgid: $(DIR)/test-getpgid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-getpgid.c -o $(DIR)/test-getpgid 2> /dev/null || true
	@if [ -f $(DIR)/test-getpgid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-getpgid

#
#  check if we have setpgid
#
.PHONY: have_setpgid
have_setpgid: $(DIR)/test-setpgid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setpgid.c -o $(DIR)/test-setpgid 2> /dev/null || true
	@if [ -f $(DIR)/test-setpgid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setpgid

#
#  check if we have mlock
#
.PHONY: have_mlock
have_mlock: $(DIR)/test-mlock.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mlock.c -o $(DIR)/test-mlock 2> /dev/null || true
	@if [ -f $(DIR)/test-mlock ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mlock

#
#  check if we have mlockall
#
.PHONY: have_mlockall
have_mlockall: $(DIR)/test-mlockall.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mlockall.c -o $(DIR)/test-mlockall 2> /dev/null || true
	@if [ -f $(DIR)/test-mlockall ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mlockall

#
#  check if we have personality
#
.PHONY: have_personality
have_personality: $(DIR)/test-personality.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-personality.c -o $(DIR)/test-personality 2> /dev/null || true
	@if [ -f $(DIR)/test-personality ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-personality

#
#  check if we have ppoll
#
.PHONY: have_ppoll
have_ppoll: $(DIR)/test-ppoll.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-ppoll.c -o $(DIR)/test-ppoll 2> /dev/null || true
	@if [ -f $(DIR)/test-ppoll ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-ppoll

#
#  check if we have pselect
#
.PHONY: have_pselect
have_pselect: $(DIR)/test-pselect.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-pselect.c -o $(DIR)/test-pselect 2> /dev/null || true
	@if [ -f $(DIR)/test-pselect ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-pselect

#
#  check if we have setns
#
.PHONY: have_setns
have_setns: $(DIR)/test-setns.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setns.c -o $(DIR)/test-setns 2> /dev/null || true
	@if [ -f $(DIR)/test-setns ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setns

#
#  check if we have setreuid
#
.PHONY: have_setreuid
have_setreuid: $(DIR)/test-setreuid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setreuid.c -o $(DIR)/test-setreuid 2> /dev/null || true
	@if [ -f $(DIR)/test-setreuid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setreuid

#
#  check if we have setregid
#
.PHONY: have_setregid
have_setregid: $(DIR)/test-setregid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setregid.c -o $(DIR)/test-setregid 2> /dev/null || true
	@if [ -f $(DIR)/test-setregid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setregid

#
#  check if we have setresuid
#
.PHONY: have_setresuid
have_setresuid: $(DIR)/test-setresuid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setresuid.c -o $(DIR)/test-setresuid 2> /dev/null || true
	@if [ -f $(DIR)/test-setresuid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setresuid

#
#  check if we have setresgid
#
.PHONY: have_setresgid
have_setresgid: $(DIR)/test-setresgid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-setresgid.c -o $(DIR)/test-setresgid 2> /dev/null || true
	@if [ -f $(DIR)/test-setresgid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-setresgid

#
#  check if we have sigaltstack
#
.PHONY: have_sigaltstack
have_sigaltstack: $(DIR)/test-sigaltstack.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sigaltstack.c -o $(DIR)/test-sigaltstack 2> /dev/null || true
	@if [ -f $(DIR)/test-sigaltstack ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-sigaltstack

#
#  check if we have sigqueue
#
.PHONY: have_sigqueue
have_sigqueue: $(DIR)/test-sigqueue.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sigqueue.c -o $(DIR)/test-sigqueue 2> /dev/null || true
	@if [ -f $(DIR)/test-sigqueue ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-sigqueue

#
#  check if we have sigwaitinfo
#
.PHONY: have_sigwaitinfo
have_sigwaitinfo: $(DIR)/test-sigwaitinfo.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-sigwaitinfo.c -o $(DIR)/test-sigwaitinfo 2> /dev/null || true
	@if [ -f $(DIR)/test-sigwaitinfo ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-sigwaitinfo

#
#  check if we have modify_ldt
#
.PHONY: have_modify_ldt
have_modify_ldt: $(DIR)/test-modify-ldt.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-modify-ldt.c -o $(DIR)/test-modify-ldt 2> /dev/null || true
	@if [ -f $(DIR)/test-modify-ldt ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-modify-ldt

#
#  check if we have mprotect
#
.PHONY: have_mprotect
have_mprotect: $(DIR)/test-mprotect.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mprotect.c -o $(DIR)/test-mprotect 2> /dev/null || true
	@if [ -f $(DIR)/test-mprotect ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mprotect

#
#  check if we have msync
#
.PHONY: have_msync
have_msync: $(DIR)/test-msync.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-msync.c -o $(DIR)/test-msync 2> /dev/null || true
	@if [ -f $(DIR)/test-msync ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-msync

#
#  check if we have mincore
#
.PHONY: have_mincore
have_mincore: $(DIR)/test-mincore.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-mincore.c -o $(DIR)/test-mincore 2> /dev/null || true
	@if [ -f $(DIR)/test-mincore ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-mincore

#
#  check if we have posix_fadvise
#
.PHONY: have_posix_fadvise
have_posix_fadvise: $(DIR)/test-posix-fadvise.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-posix-fadvise.c -o $(DIR)/test-posix-fadvise 2> /dev/null || true
	@if [ -f $(DIR)/test-posix-fadvise ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-posix-fadvise

#
#  check if we have posix_openpt
#
.PHONY: have_posix_openpt
have_posix_openpt: $(DIR)/test-posix-openpt.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-posix-openpt.c -o $(DIR)/test-posix-openpt 2> /dev/null || true
	@if [ -f $(DIR)/test-posix-openpt ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-posix-openpt

#
#  check if we have posix_memalign
#
.PHONY: have_posix_memalign
have_posix_memalign: $(DIR)/test-posix-memalign.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-posix-memalign.c -o $(DIR)/test-posix-memalign 2> /dev/null || true
	@if [ -f $(DIR)/test-posix-memalign ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-posix-memalign

#
#  check if we have pwritev
#
.PHONY: have_pwritev
have_pwritev: $(DIR)/test-pwritev.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-pwritev.c -o $(DIR)/test-pwritev 2> /dev/null || true
	@if [ -f $(DIR)/test-pwritev ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-pwritev

#
#  check if we have uname
#
.PHONY: have_uname
have_uname: $(DIR)/test-uname.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-uname.c -o $(DIR)/test-uname 2> /dev/null || true
	@if [ -f $(DIR)/test-uname ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-uname

#
#  check if we have ustat, use -Werror to avoid building it in on
#  arches that report at build time: "warning: ustat is not implemented
#  and will always fail"
#
.PHONY: have_ustat
have_ustat: $(DIR)/test-ustat.c
	@$(CC) -Werror $(CFLAGS) $(CPPFLAGS) $(DIR)/test-ustat.c -o $(DIR)/test-ustat 2> /dev/null || true
	@if [ -f $(DIR)/test-ustat ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-ustat

#
#  check if we have utimensat
#
.PHONY: have_utimensat
have_utimensat: $(DIR)/test-utimensat.c
	@$(CC) -Werror $(CFLAGS) $(CPPFLAGS) $(DIR)/test-utimensat.c -o $(DIR)/test-utimensat 2> /dev/null || true
	@if [ -f $(DIR)/test-utimensat ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-utimensat

#
#  check if we have waidid
#
.PHONY: have_waitid
have_waitid: $(DIR)/test-waitid.c
	@$(CC) -Werror $(CFLAGS) $(CPPFLAGS) $(DIR)/test-waitid.c -o $(DIR)/test-waitid 2> /dev/null || true
	@if [ -f $(DIR)/test-waitid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-waitid

#
#  check if we have cpuid
#
.PHONY: have_cpuid
have_cpuid: $(DIR)/test-cpuid.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-cpuid.c -o $(DIR)/test-cpuid 2> /dev/null || true
	@if [ -f $(DIR)/test-cpuid ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-cpuid

#
#  check if we have BSD getmntinfo
#
.PHONY: have_getmntinfo
have_getmntinfo: $(DIR)/test-getmntinfo.c
	@$(CC) -Werror $(CFLAGS) $(CPPFLAGS) $(DIR)/test-getmntinfo.c -o $(DIR)/test-getmntinfo 2> /dev/null || true
	@if [ -f $(DIR)/test-getmntinfo ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-getmntinfo

#
#  check if we have Linux getmntent
#
.PHONY: have_getmntent
have_getmntent: $(DIR)/test-getmntent.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-getmntent.c -o $(DIR)/test-getmntent 2> /dev/null || true
	@if [ -f $(DIR)/test-getmntent ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-getmntent

#
#  check if we have futimes
#
.PHONY: have_futimes
have_futimes: $(DIR)/test-futimes.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-futimes.c -o $(DIR)/test-futimes 2> /dev/null || true
	@if [ -f $(DIR)/test-futimes ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-futimes

#
#  check if we have futimens
#
.PHONY: have_futimens
have_futimens: $(DIR)/test-futimens.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-futimens.c -o $(DIR)/test-futimens 2> /dev/null || true
	@if [ -f $(DIR)/test-futimens ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-futimens

#
#  check if we have fsync
#
.PHONY: have_fsync
have_fsync: $(DIR)/test-fsync.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-fsync.c -o $(DIR)/test-fsync 2> /dev/null || true
	@if [ -f $(DIR)/test-fsync ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-fsync

#
#  check if we have fdatasync
#
.PHONY: have_fdatasync
have_fdatasync: $(DIR)/test-fdatasync.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) -Werror $(DIR)/test-fdatasync.c -o $(DIR)/test-fdatasync 2> /dev/null || true
	@if [ -f $(DIR)/test-fdatasync ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-fdatasync

#
#  check if we have syncfs
#
.PHONY: have_syncfs
have_syncfs: $(DIR)/test-syncfs.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-syncfs.c -o $(DIR)/test-syncfs 2> /dev/null || true
	@if [ -f $(DIR)/test-syncfs ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-syncfs

#
#  check if we have lockf
#
.PHONY: have_lockf
have_lockf: $(DIR)/test-lockf.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-lockf.c -o $(DIR)/test-lockf 2> /dev/null || true
	@if [ -f $(DIR)/test-lockf ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-lockf

#
#  check if we have clone
#
.PHONY: have_clone
have_clone: $(DIR)/test-clone.c
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(DIR)/test-clone.c -o $(DIR)/test-clone 2> /dev/null || true
	@if [ -f $(DIR)/test-clone ]; then \
		echo 1 ;\
	else \
		echo 0 ;\
	fi
	@rm -rf $(DIR)/test-clone
